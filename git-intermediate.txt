(use 'git switch' iso 'git checkout' in recent versions)
	-> switch repoints HEAD to different branch
	-> checkout repoints HEAD directly to a commit
		(can be used to tryout temp stuff, when switching to actual branch again, 
		latest commits will be garbage collected unless gathered under a new brand)
		


GIT OBJECT SYSTEM
-----------------

Types of objects in git object database:
	commit
	tree
	blob
	annotated tag (extra info object, points to a commit)

- Calculate hash of object:
	echo "Apple Pie" | git hash-object -w --stdin

- Get type of hashed object:
	git cat-file 23991897e13e47ed0adb91a0082c31c82fe0cbe5 -t

- Print out actual content of hashed object:
	git cat-file 23991897e13e47ed0adb91a0082c31c82fe0cbe5 -p

- Count objects in git object database:
	git count-objects


BRANCHING & MERGING
-------------------

- Display overview of available branches:
	git branch

- !!! A branch is just a reference/pointer to a commit !!!

- Object database -> branches stored in .git/refs/heads

- Read content of branch file (eg. main)
	cat .git/refs/heads/main

- Create new branch
	git branch branchname

- HEAD file contains ref to the current branch 

- Merge other branch into current HEAD branch:
	git merge branchname

- !!! a merge is just a commit with 2 parents !!! 


REBASING
--------

- Rebasing: put commits of current branch 'on top of' of other branch... 
	-> hashes of commits due change due to new parent hashes!

vs merging:
	Merging : preserves history exactly as it happened, however project history sometimes difficult to understand in large/complex projects.
	Rebasing: rebase history looks neat & streamlined however commit links are not necesarrily representing actual time of commits!.
